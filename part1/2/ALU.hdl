// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Preprocessing x
    Mux16(a=x, b=false, sel=zx, out=xAfterZx);
    Not16(in=xAfterZx, out=notXAfterZx);
    Mux16(a=xAfterZx, b=notXAfterZx, sel=nx, out=xAfterNx);

    // Preprocessing y
    Mux16(a=y, b=false, sel=zy, out=yAfterZy);
    Not16(in=yAfterZy, out=notYAfterZy);
    Mux16(a=yAfterZy, b=notYAfterZy, sel=ny, out=yAfterNy);

    // Summing x and y
    Add16(a=xAfterNx, b=yAfterNy, out=sumOfXAndY);

    // computing x and y
    And16(a=xAfterNx, b=yAfterNy, out=xAndY);

    // Deciding whether to output sum or and based on f
    Mux16(a=xAndY, b=sumOfXAndY, sel=f, out=preOutput);

    // Deciding wether or not to negate the output
    Not16(in=preOutput, out=notPreOutput);
    Mux16(a=preOutput, b=notPreOutput, sel=no, out=output);

    // Output
    And16(a=output, b=true, out=out);

    // Checking whether the output is entirely made up of zeros
    And16(a=output, b=true, out[0..7]=first8OutputBits, out[8..15]=last8OutputBits);
    Or8Way(in=first8OutputBits, out=oneInFirst8OutputBits);
    Or8Way(in=last8OutputBits, out=oneInLast8OutputBits);
    Or(a=oneInFirst8OutputBits, b=oneInLast8OutputBits, out=outputIsNotZero);
    Not(in=outputIsNotZero, out=zr);

    // Checking whether the output is negative or not
    And16(a=output, b=true, out[15]=mostSignificantBit);
    And(a=mostSignificantBit, b=true, out=ng);
}